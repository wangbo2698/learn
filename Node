class Node {
    public int val;
    public Node next;//null
    public Node(int val) {
        this.val = val;
    }
}

public class MyLinkedList {

    public Node head = null;

    //穷举的方式 创建一个单链表
   /* public void createList() {
        Node node1 = new Node(1);
        Node node2 = new Node(2);
        Node node3 = new Node(3);
        Node node4 = new Node(4);
        node1.next = node2;
        node2.next = node3;
        node3.next = node4;
        this.head = node1;
    }*/

    /**
     * 头插法
     * @param val
     */
    public void addFirst(int val) {
        Node node = new Node(val);
        node.next = this.head;
        this.head = node;
    }

    /**
     * 尾插法
     * @param val
     */
    public void addLast(int val) {
        Node node = new Node(val);
        if(this.head == null) {
            this.head = node;
        }else {
            Node cur = this.head;
            while (cur.next != null) {
                cur = cur.next;
            }
            //cur.next == null;
            cur.next = node;
        }
    }

    public Node searchIndexSubOne(int index) {
        Node cur = this.head;
        /*while (index - 1 != 0) {
            cur = cur.next;
            index--;
        }*/
        int count = 0;
        while (count != index-1) {
            cur = cur.next;
            count++;
        }
        return cur;
    }

    //任意位置插入,第一个数据节点为0号下标
    public void addIndex(int index,int data){
        if(index < 0 || index > getLength()) {
            System.out.println("位置不合法！");
            return;
        }
        if(index == 0) {
            addFirst(data);
            return;
        }
        if(index == getLength()) {
            addLast(data);
            return;
        }
        //说明就是中间插入了
        Node ret = searchIndexSubOne(index);
        //ret中存储的就是index-1位置的节点的地址(引用)
        Node node = new Node(data);
        node.next = ret.next;
        ret.next = node;
    }

    public int getLength() {
        int len = 0;
        Node cur = this.head;
        while (cur != null) {
            len++;
            cur = cur.next;
        }
        return len;
    }

    //查找是否包含关键字key是否在单链表当中
    public boolean contains(int key) {
        Node cur = this.head;
        while (cur != null) {
            if(cur.val == key) {
                return true;
            }
            cur = cur.next;
        }
        return false;
    }

    //从头开始找key的前驱
    public Node searchPrev(int key) {
        Node cur = this.head;
        while (cur.next != null) {
            if(cur.next.val == key) {
                //就是前驱
                return cur;
            }
            cur = cur.next;
        }
        //代表没有找到
        return null;
    }

    //删除第一次出现关键字为key的节点
    public void remove(int key) {
        //1、判断头结点是不是我要删除的节点
        if(this.head.val == key) {
            this.head = this.head.next;
            return;
        }
        //2、找到Key的前驱节点
        Node prev = searchPrev(key);
        if(prev == null) {
            System.out.println("没有要删除的这个节点！");
            return;
        }
        //
        Node del = prev.next;
        //开始删除
        prev.next = del.next;
    }

    //删除所有值为key的节点
    public void removeAllKey(int key) {
        Node cur = this.head.next;
        Node prev = this.head;
        //你要把单链表的每个节点都遍历完
        while (cur != null) {
            if(cur.val == key) {
                //这是你要删除的节点
                prev.next = cur.next;
                cur = cur.next;
            }else {
                prev = cur;//prev = prev.next;
                cur = cur.next;
            }
        }
        if(this.head.val == key) {
            this.head = this.head.next;
        }
    }

    public void show() {
        Node cur = this.head;
        while (cur != null) {
            System.out.print(cur.val+" ");
            cur = cur.next;
        }
        System.out.println();
    }

    //根据指定的节点位置开始打印
    public void show2(Node newHead) {
        Node cur = newHead;
        while (cur != null) {
            System.out.print(cur.val+" ");
            cur = cur.next;
        }
    }


    public void clear() {
        //this.head = null;
        Node cur = this.head;
        while (cur != null) {
            Node curNext = cur.next;
            cur.next = null;
            cur = curNext;
        }
        this.head = null;
    }

    public Node reverseList1() {
        if(head == null ||   this.head.next == null) {
            return this.head;
        }
        //cur 代表的是 当前要翻转或者头插的一个节点
        Node cur = this.head;
        Node curNext = cur.next;
        //头节点
        cur.next = null;
        cur = curNext;
        while (cur != null) {
            curNext = cur.next;
            cur.next = this.head;
            this.head = cur;
            cur = curNext;
        }
        return this.head;
    }

    public void reverseList1_1() {
        /*if(head == null ||   this.head.next == null) {
            return this.head;
        }*/
        //cur 代表的是 当前要翻转或者头插的一个节点
        Node cur = this.head;
        Node curNext = cur.next;
        if(cur != null) {
            //头节点
            cur.next = null;
        }
        cur = curNext;
        while (cur != null) {
            curNext = cur.next;
            cur.next = this.head;
            this.head = cur;
            cur = curNext;
        }
        //return this.head;
    }

    public Node reverseList() {
        Node prev = null;
        Node cur = this.head;
        Node newHead = null;
        while (cur != null) {
            Node curNext = cur.next;
            if(curNext == null) {
                newHead = cur;
            }
            cur.next = prev;
            prev = cur;
            cur = curNext;
        }
        return newHead;
    }

    public  Node middleNode() {
        Node fast = this.head;
        Node slow = this.head;
        while (fast != null && fast.next!= null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }


    public Node findKthToTail(int k) {
        if(k <= 0) {
            return null;
        }
        Node fast = this.head;
        Node slow = this.head;
        while (k-1 != 0) {
            if(fast.next != null) {
                fast = fast.next;
                k--;
            }else {
                System.out.println("你给的k太大了！！");
                return null;
            }
        }
        //fast走了k-1步
        while (fast.next != null) {
            fast = fast.next;
            slow = slow.next;
        }
        return slow;
    }


    public Node partition(int x) {
        Node cur = this.head;
        Node bs = null;
        Node be = null;
        Node as = null;
        Node ae = null;
        while (cur != null) {
            if(cur.val < x) {
                //小于x的
                if(bs == null) {
                    //第一次插入
                    bs = cur;
                    be = cur;//be = bs;
                }else {
                    be.next = cur;
                    be = be.next;
                }
            }else {
                //大于等于x的
                if(as == null) {
                    //第一次插入
                    as = cur;
                    ae = cur;
                }else {
                    ae.next = cur;
                    ae = ae.next;
                }
            }
            cur = cur.next;
        }
        //第一个区间没有数据的时候
        if(bs == null) {
            return as;
        }

        be.next = as;
        if(as != null) {
            //预防最后一个区间的最后一个节点 他的next不是null.
            //不预防的话  可能就死循环了
            ae.next = null;
        }
        return bs;
    }

    public Node deleteDuplication() {

        Node cur = this.head;
        Node tmpHead = new Node(-1);
        Node newHead = tmpHead;
        while (cur != null) {
            if(cur.next != null && cur.val == cur.next.val) {
                //找到了重复的
                while (cur.next != null && cur.val == cur.next.val) {
                    cur = cur.next;
                }
                cur = cur.next;
            }else {
                //没有找到重复的
                tmpHead.next = cur;
                tmpHead = tmpHead.next;
                cur = cur.next;
            }
        }
        tmpHead.next = null;//防止最后有个节点也是重复的节点
        return newHead.next;
    }


    public boolean chkPalindrome() {

        if(this.head == null) return false;

        if(this.head.next == null) return true;

        Node fast = this.head;
        Node slow = this.head;

        while (fast != null && fast.next!=null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        //slow的位置 一定是中间位置
        //2、翻转
        Node cur = slow.next;
        while (cur != null) {
            Node curNext = cur.next;
            cur.next = slow;
            slow = cur;
            cur =curNext;
        }
        //
        while (this.head != slow) {
            if(this.head.val != slow.val) {
                return false;
            }
            //偶数的情况下
            if(this.head.next == slow) {
                return true;
            }
            //
            this.head = this.head.next;
            slow = slow.next;
        }
        return true;
    }

    //包教  包会  包婚配

    public boolean hasCycle1() {
        Node fast = this.head;
        Node slow = this.head;

        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if(slow == fast) {
                return true;
            }
        }
        //
        return false;
    }

    public boolean hasCycle() {
        Node fast = this.head;
        Node slow = this.head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if(slow == fast) {
                break;
            }
        }
       if(fast == null || fast.next == null) {
           return false;
       }
       return true;
    }


    public Node detectCycle() {
        Node fast = this.head;
        Node slow = this.head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if(slow == fast) {
                break;
            }
        }
        if(fast == null || fast.next == null) {
            return null;
        }
        slow = this.head;
        while (fast != slow) {
            slow = slow.next;
            fast = fast.next;
        }
        return slow;
    }


}
